// Code generated by MockGen. DO NOT EDIT.
// Source: ITransaction.go
//
// Generated by this command:
//
//	mockgen -source=ITransaction.go -destination=../mocks/ITransaction_mock.go -package=mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"
	models "test-plus/internal/model"

	gin "github.com/gin-gonic/gin"
	gomock "go.uber.org/mock/gomock"
)

// MockITransactionRepo is a mock of ITransactionRepo interface.
type MockITransactionRepo struct {
	ctrl     *gomock.Controller
	recorder *MockITransactionRepoMockRecorder
	isgomock struct{}
}

// MockITransactionRepoMockRecorder is the mock recorder for MockITransactionRepo.
type MockITransactionRepoMockRecorder struct {
	mock *MockITransactionRepo
}

// NewMockITransactionRepo creates a new mock instance.
func NewMockITransactionRepo(ctrl *gomock.Controller) *MockITransactionRepo {
	mock := &MockITransactionRepo{ctrl: ctrl}
	mock.recorder = &MockITransactionRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockITransactionRepo) EXPECT() *MockITransactionRepoMockRecorder {
	return m.recorder
}

// CreateTransaction mocks base method.
func (m *MockITransactionRepo) CreateTransaction(ctx context.Context, transaction *models.Transaction) (*models.Transaction, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateTransaction", ctx, transaction)
	ret0, _ := ret[0].(*models.Transaction)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateTransaction indicates an expected call of CreateTransaction.
func (mr *MockITransactionRepoMockRecorder) CreateTransaction(ctx, transaction any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTransaction", reflect.TypeOf((*MockITransactionRepo)(nil).CreateTransaction), ctx, transaction)
}

// FindByTranscID mocks base method.
func (m *MockITransactionRepo) FindByTranscID(ctx context.Context, ID int) (models.Transaction, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByTranscID", ctx, ID)
	ret0, _ := ret[0].(models.Transaction)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByTranscID indicates an expected call of FindByTranscID.
func (mr *MockITransactionRepoMockRecorder) FindByTranscID(ctx, ID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByTranscID", reflect.TypeOf((*MockITransactionRepo)(nil).FindByTranscID), ctx, ID)
}

// MockITransactionService is a mock of ITransactionService interface.
type MockITransactionService struct {
	ctrl     *gomock.Controller
	recorder *MockITransactionServiceMockRecorder
	isgomock struct{}
}

// MockITransactionServiceMockRecorder is the mock recorder for MockITransactionService.
type MockITransactionServiceMockRecorder struct {
	mock *MockITransactionService
}

// NewMockITransactionService creates a new mock instance.
func NewMockITransactionService(ctrl *gomock.Controller) *MockITransactionService {
	mock := &MockITransactionService{ctrl: ctrl}
	mock.recorder = &MockITransactionServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockITransactionService) EXPECT() *MockITransactionServiceMockRecorder {
	return m.recorder
}

// CreateTransaction mocks base method.
func (m *MockITransactionService) CreateTransaction(ctx context.Context, Transaction *models.Transaction) (*models.Transaction, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateTransaction", ctx, Transaction)
	ret0, _ := ret[0].(*models.Transaction)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateTransaction indicates an expected call of CreateTransaction.
func (mr *MockITransactionServiceMockRecorder) CreateTransaction(ctx, Transaction any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTransaction", reflect.TypeOf((*MockITransactionService)(nil).CreateTransaction), ctx, Transaction)
}

// FindByTranscID mocks base method.
func (m *MockITransactionService) FindByTranscID(ctx context.Context, ID int) (models.Transaction, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByTranscID", ctx, ID)
	ret0, _ := ret[0].(models.Transaction)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByTranscID indicates an expected call of FindByTranscID.
func (mr *MockITransactionServiceMockRecorder) FindByTranscID(ctx, ID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByTranscID", reflect.TypeOf((*MockITransactionService)(nil).FindByTranscID), ctx, ID)
}

// MockITransactionAPI is a mock of ITransactionAPI interface.
type MockITransactionAPI struct {
	ctrl     *gomock.Controller
	recorder *MockITransactionAPIMockRecorder
	isgomock struct{}
}

// MockITransactionAPIMockRecorder is the mock recorder for MockITransactionAPI.
type MockITransactionAPIMockRecorder struct {
	mock *MockITransactionAPI
}

// NewMockITransactionAPI creates a new mock instance.
func NewMockITransactionAPI(ctrl *gomock.Controller) *MockITransactionAPI {
	mock := &MockITransactionAPI{ctrl: ctrl}
	mock.recorder = &MockITransactionAPIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockITransactionAPI) EXPECT() *MockITransactionAPIMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockITransactionAPI) Create(c *gin.Context) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Create", c)
}

// Create indicates an expected call of Create.
func (mr *MockITransactionAPIMockRecorder) Create(c any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockITransactionAPI)(nil).Create), c)
}

// Find mocks base method.
func (m *MockITransactionAPI) Find(c *gin.Context) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Find", c)
}

// Find indicates an expected call of Find.
func (mr *MockITransactionAPIMockRecorder) Find(c any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Find", reflect.TypeOf((*MockITransactionAPI)(nil).Find), c)
}
