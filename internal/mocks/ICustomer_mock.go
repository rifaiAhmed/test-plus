// Code generated by MockGen. DO NOT EDIT.
// Source: ICustomer.go
//
// Generated by this command:
//
//	mockgen -source=ICustomer.go -destination=../mocks/ICustomer_mock.go -package=mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"
	models "test-plus/internal/model"

	gin "github.com/gin-gonic/gin"
	gomock "go.uber.org/mock/gomock"
)

// MockICustomerRepo is a mock of ICustomerRepo interface.
type MockICustomerRepo struct {
	ctrl     *gomock.Controller
	recorder *MockICustomerRepoMockRecorder
	isgomock struct{}
}

// MockICustomerRepoMockRecorder is the mock recorder for MockICustomerRepo.
type MockICustomerRepoMockRecorder struct {
	mock *MockICustomerRepo
}

// NewMockICustomerRepo creates a new mock instance.
func NewMockICustomerRepo(ctrl *gomock.Controller) *MockICustomerRepo {
	mock := &MockICustomerRepo{ctrl: ctrl}
	mock.recorder = &MockICustomerRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockICustomerRepo) EXPECT() *MockICustomerRepoMockRecorder {
	return m.recorder
}

// CreateCustomer mocks base method.
func (m *MockICustomerRepo) CreateCustomer(ctx context.Context, customer *models.Customer) (*models.Customer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateCustomer", ctx, customer)
	ret0, _ := ret[0].(*models.Customer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateCustomer indicates an expected call of CreateCustomer.
func (mr *MockICustomerRepoMockRecorder) CreateCustomer(ctx, customer any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCustomer", reflect.TypeOf((*MockICustomerRepo)(nil).CreateCustomer), ctx, customer)
}

// FindByID mocks base method.
func (m *MockICustomerRepo) FindByID(ctx context.Context, ID int) (models.Customer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByID", ctx, ID)
	ret0, _ := ret[0].(models.Customer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByID indicates an expected call of FindByID.
func (mr *MockICustomerRepoMockRecorder) FindByID(ctx, ID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByID", reflect.TypeOf((*MockICustomerRepo)(nil).FindByID), ctx, ID)
}

// MockICustomerService is a mock of ICustomerService interface.
type MockICustomerService struct {
	ctrl     *gomock.Controller
	recorder *MockICustomerServiceMockRecorder
	isgomock struct{}
}

// MockICustomerServiceMockRecorder is the mock recorder for MockICustomerService.
type MockICustomerServiceMockRecorder struct {
	mock *MockICustomerService
}

// NewMockICustomerService creates a new mock instance.
func NewMockICustomerService(ctrl *gomock.Controller) *MockICustomerService {
	mock := &MockICustomerService{ctrl: ctrl}
	mock.recorder = &MockICustomerServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockICustomerService) EXPECT() *MockICustomerServiceMockRecorder {
	return m.recorder
}

// CreateCustomer mocks base method.
func (m *MockICustomerService) CreateCustomer(ctx context.Context, customer *models.CustomerParam) (*models.Customer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateCustomer", ctx, customer)
	ret0, _ := ret[0].(*models.Customer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateCustomer indicates an expected call of CreateCustomer.
func (mr *MockICustomerServiceMockRecorder) CreateCustomer(ctx, customer any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCustomer", reflect.TypeOf((*MockICustomerService)(nil).CreateCustomer), ctx, customer)
}

// FindByID mocks base method.
func (m *MockICustomerService) FindByID(ctx context.Context, ID int) (models.Customer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByID", ctx, ID)
	ret0, _ := ret[0].(models.Customer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByID indicates an expected call of FindByID.
func (mr *MockICustomerServiceMockRecorder) FindByID(ctx, ID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByID", reflect.TypeOf((*MockICustomerService)(nil).FindByID), ctx, ID)
}

// MockICustomerAPI is a mock of ICustomerAPI interface.
type MockICustomerAPI struct {
	ctrl     *gomock.Controller
	recorder *MockICustomerAPIMockRecorder
	isgomock struct{}
}

// MockICustomerAPIMockRecorder is the mock recorder for MockICustomerAPI.
type MockICustomerAPIMockRecorder struct {
	mock *MockICustomerAPI
}

// NewMockICustomerAPI creates a new mock instance.
func NewMockICustomerAPI(ctrl *gomock.Controller) *MockICustomerAPI {
	mock := &MockICustomerAPI{ctrl: ctrl}
	mock.recorder = &MockICustomerAPIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockICustomerAPI) EXPECT() *MockICustomerAPIMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockICustomerAPI) Create(c *gin.Context) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Create", c)
}

// Create indicates an expected call of Create.
func (mr *MockICustomerAPIMockRecorder) Create(c any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockICustomerAPI)(nil).Create), c)
}

// Find mocks base method.
func (m *MockICustomerAPI) Find(c *gin.Context) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Find", c)
}

// Find indicates an expected call of Find.
func (mr *MockICustomerAPIMockRecorder) Find(c any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Find", reflect.TypeOf((*MockICustomerAPI)(nil).Find), c)
}
