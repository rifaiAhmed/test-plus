// Code generated by MockGen. DO NOT EDIT.
// Source: Iregister.go
//
// Generated by this command:
//
//	mockgen -source=Iregister.go -destination=../mocks/Iregister_mock.go -package=mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"
	models "test-plus/internal/model"

	gin "github.com/gin-gonic/gin"
	gomock "go.uber.org/mock/gomock"
)

// MockIRegisterService is a mock of IRegisterService interface.
type MockIRegisterService struct {
	ctrl     *gomock.Controller
	recorder *MockIRegisterServiceMockRecorder
	isgomock struct{}
}

// MockIRegisterServiceMockRecorder is the mock recorder for MockIRegisterService.
type MockIRegisterServiceMockRecorder struct {
	mock *MockIRegisterService
}

// NewMockIRegisterService creates a new mock instance.
func NewMockIRegisterService(ctrl *gomock.Controller) *MockIRegisterService {
	mock := &MockIRegisterService{ctrl: ctrl}
	mock.recorder = &MockIRegisterServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIRegisterService) EXPECT() *MockIRegisterServiceMockRecorder {
	return m.recorder
}

// Register mocks base method.
func (m *MockIRegisterService) Register(ctx context.Context, request models.User) (any, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Register", ctx, request)
	ret0, _ := ret[0].(any)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Register indicates an expected call of Register.
func (mr *MockIRegisterServiceMockRecorder) Register(ctx, request any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Register", reflect.TypeOf((*MockIRegisterService)(nil).Register), ctx, request)
}

// MockIRegisterHandler is a mock of IRegisterHandler interface.
type MockIRegisterHandler struct {
	ctrl     *gomock.Controller
	recorder *MockIRegisterHandlerMockRecorder
	isgomock struct{}
}

// MockIRegisterHandlerMockRecorder is the mock recorder for MockIRegisterHandler.
type MockIRegisterHandlerMockRecorder struct {
	mock *MockIRegisterHandler
}

// NewMockIRegisterHandler creates a new mock instance.
func NewMockIRegisterHandler(ctrl *gomock.Controller) *MockIRegisterHandler {
	mock := &MockIRegisterHandler{ctrl: ctrl}
	mock.recorder = &MockIRegisterHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIRegisterHandler) EXPECT() *MockIRegisterHandlerMockRecorder {
	return m.recorder
}

// Register mocks base method.
func (m *MockIRegisterHandler) Register(arg0 *gin.Context) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Register", arg0)
}

// Register indicates an expected call of Register.
func (mr *MockIRegisterHandlerMockRecorder) Register(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Register", reflect.TypeOf((*MockIRegisterHandler)(nil).Register), arg0)
}
