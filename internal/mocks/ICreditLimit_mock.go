// Code generated by MockGen. DO NOT EDIT.
// Source: ICreditLimit.go
//
// Generated by this command:
//
//	mockgen -source=ICreditLimit.go -destination=../mocks/ICreditLimit_mock.go -package=mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"
	models "test-plus/internal/model"

	gin "github.com/gin-gonic/gin"
	gomock "go.uber.org/mock/gomock"
)

// MockICreditLimitRepo is a mock of ICreditLimitRepo interface.
type MockICreditLimitRepo struct {
	ctrl     *gomock.Controller
	recorder *MockICreditLimitRepoMockRecorder
	isgomock struct{}
}

// MockICreditLimitRepoMockRecorder is the mock recorder for MockICreditLimitRepo.
type MockICreditLimitRepoMockRecorder struct {
	mock *MockICreditLimitRepo
}

// NewMockICreditLimitRepo creates a new mock instance.
func NewMockICreditLimitRepo(ctrl *gomock.Controller) *MockICreditLimitRepo {
	mock := &MockICreditLimitRepo{ctrl: ctrl}
	mock.recorder = &MockICreditLimitRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockICreditLimitRepo) EXPECT() *MockICreditLimitRepoMockRecorder {
	return m.recorder
}

// CreateCreditLimit mocks base method.
func (m *MockICreditLimitRepo) CreateCreditLimit(ctx context.Context, creditLimit *models.CreditLimit) (*models.CreditLimit, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateCreditLimit", ctx, creditLimit)
	ret0, _ := ret[0].(*models.CreditLimit)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateCreditLimit indicates an expected call of CreateCreditLimit.
func (mr *MockICreditLimitRepoMockRecorder) CreateCreditLimit(ctx, creditLimit any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCreditLimit", reflect.TypeOf((*MockICreditLimitRepo)(nil).CreateCreditLimit), ctx, creditLimit)
}

// FindByID mocks base method.
func (m *MockICreditLimitRepo) FindByID(ctx context.Context, ID int) (models.CreditLimit, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByID", ctx, ID)
	ret0, _ := ret[0].(models.CreditLimit)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByID indicates an expected call of FindByID.
func (mr *MockICreditLimitRepoMockRecorder) FindByID(ctx, ID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByID", reflect.TypeOf((*MockICreditLimitRepo)(nil).FindByID), ctx, ID)
}

// MockICreditLimitService is a mock of ICreditLimitService interface.
type MockICreditLimitService struct {
	ctrl     *gomock.Controller
	recorder *MockICreditLimitServiceMockRecorder
	isgomock struct{}
}

// MockICreditLimitServiceMockRecorder is the mock recorder for MockICreditLimitService.
type MockICreditLimitServiceMockRecorder struct {
	mock *MockICreditLimitService
}

// NewMockICreditLimitService creates a new mock instance.
func NewMockICreditLimitService(ctrl *gomock.Controller) *MockICreditLimitService {
	mock := &MockICreditLimitService{ctrl: ctrl}
	mock.recorder = &MockICreditLimitServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockICreditLimitService) EXPECT() *MockICreditLimitServiceMockRecorder {
	return m.recorder
}

// CreateCreditLimit mocks base method.
func (m *MockICreditLimitService) CreateCreditLimit(ctx context.Context, CreditLimit *models.CreditLimit) (*models.CreditLimit, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateCreditLimit", ctx, CreditLimit)
	ret0, _ := ret[0].(*models.CreditLimit)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateCreditLimit indicates an expected call of CreateCreditLimit.
func (mr *MockICreditLimitServiceMockRecorder) CreateCreditLimit(ctx, CreditLimit any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCreditLimit", reflect.TypeOf((*MockICreditLimitService)(nil).CreateCreditLimit), ctx, CreditLimit)
}

// FindLimitByID mocks base method.
func (m *MockICreditLimitService) FindLimitByID(ctx context.Context, ID int) (models.CreditLimit, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindLimitByID", ctx, ID)
	ret0, _ := ret[0].(models.CreditLimit)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindLimitByID indicates an expected call of FindLimitByID.
func (mr *MockICreditLimitServiceMockRecorder) FindLimitByID(ctx, ID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindLimitByID", reflect.TypeOf((*MockICreditLimitService)(nil).FindLimitByID), ctx, ID)
}

// MockICreditLimitAPI is a mock of ICreditLimitAPI interface.
type MockICreditLimitAPI struct {
	ctrl     *gomock.Controller
	recorder *MockICreditLimitAPIMockRecorder
	isgomock struct{}
}

// MockICreditLimitAPIMockRecorder is the mock recorder for MockICreditLimitAPI.
type MockICreditLimitAPIMockRecorder struct {
	mock *MockICreditLimitAPI
}

// NewMockICreditLimitAPI creates a new mock instance.
func NewMockICreditLimitAPI(ctrl *gomock.Controller) *MockICreditLimitAPI {
	mock := &MockICreditLimitAPI{ctrl: ctrl}
	mock.recorder = &MockICreditLimitAPIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockICreditLimitAPI) EXPECT() *MockICreditLimitAPIMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockICreditLimitAPI) Create(c *gin.Context) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Create", c)
}

// Create indicates an expected call of Create.
func (mr *MockICreditLimitAPIMockRecorder) Create(c any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockICreditLimitAPI)(nil).Create), c)
}

// Find mocks base method.
func (m *MockICreditLimitAPI) Find(c *gin.Context) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Find", c)
}

// Find indicates an expected call of Find.
func (mr *MockICreditLimitAPIMockRecorder) Find(c any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Find", reflect.TypeOf((*MockICreditLimitAPI)(nil).Find), c)
}
