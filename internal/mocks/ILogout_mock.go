// Code generated by MockGen. DO NOT EDIT.
// Source: ILogout.go
//
// Generated by this command:
//
//	mockgen -source=ILogout.go -destination=../mocks/ILogout_mock.go -package=mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	gin "github.com/gin-gonic/gin"
	gomock "go.uber.org/mock/gomock"
)

// MockILogoutService is a mock of ILogoutService interface.
type MockILogoutService struct {
	ctrl     *gomock.Controller
	recorder *MockILogoutServiceMockRecorder
	isgomock struct{}
}

// MockILogoutServiceMockRecorder is the mock recorder for MockILogoutService.
type MockILogoutServiceMockRecorder struct {
	mock *MockILogoutService
}

// NewMockILogoutService creates a new mock instance.
func NewMockILogoutService(ctrl *gomock.Controller) *MockILogoutService {
	mock := &MockILogoutService{ctrl: ctrl}
	mock.recorder = &MockILogoutServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockILogoutService) EXPECT() *MockILogoutServiceMockRecorder {
	return m.recorder
}

// Logout mocks base method.
func (m *MockILogoutService) Logout(ctx context.Context, token string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Logout", ctx, token)
	ret0, _ := ret[0].(error)
	return ret0
}

// Logout indicates an expected call of Logout.
func (mr *MockILogoutServiceMockRecorder) Logout(ctx, token any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Logout", reflect.TypeOf((*MockILogoutService)(nil).Logout), ctx, token)
}

// MockILogoutHandler is a mock of ILogoutHandler interface.
type MockILogoutHandler struct {
	ctrl     *gomock.Controller
	recorder *MockILogoutHandlerMockRecorder
	isgomock struct{}
}

// MockILogoutHandlerMockRecorder is the mock recorder for MockILogoutHandler.
type MockILogoutHandlerMockRecorder struct {
	mock *MockILogoutHandler
}

// NewMockILogoutHandler creates a new mock instance.
func NewMockILogoutHandler(ctrl *gomock.Controller) *MockILogoutHandler {
	mock := &MockILogoutHandler{ctrl: ctrl}
	mock.recorder = &MockILogoutHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockILogoutHandler) EXPECT() *MockILogoutHandlerMockRecorder {
	return m.recorder
}

// Logout mocks base method.
func (m *MockILogoutHandler) Logout(arg0 *gin.Context) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Logout", arg0)
}

// Logout indicates an expected call of Logout.
func (mr *MockILogoutHandlerMockRecorder) Logout(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Logout", reflect.TypeOf((*MockILogoutHandler)(nil).Logout), arg0)
}
